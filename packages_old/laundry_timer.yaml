command_line:
  - sensor:
      name: laundry_data
      command: |-
        python3 << EOF
        import json, requests, re, yaml

        def get_secret(secret):
            try:
                with open(SECRETS_FILE, "r", encoding="utf8") as file:
                    secrets = yaml.full_load(file)
                    for key, value in secrets.items():
                        if key == secret:
                            return value
            except FileNotFoundError:
                print("secrets.yaml not found")
                exit()

        SECRETS_FILE = "/config/secrets.yaml"
        USER = get_secret("laundry_user")
        PASS = get_secret("laundry_pass")
        URL = get_secret("laundry_url")

        # login
        session = requests.Session()
        response = session.post(
            f"{URL}/wp-login.php",
            data={"log": USER, "pwd": PASS},
        )

        # remote login
        widgets_url = f"{URL}/widgets/?callback=&widgets[]=aptuslogin"
        response = session.get(widgets_url)
        transform_data = json.loads(response.text[1:-2])
        parsed_url = transform_data["data"]["aptuslogin"]["objekt"][0]["aptusUrl"]

        # data
        final_response = session.get(parsed_url)
        data = final_response.text
        session.close()

        # scrape
        date = None
        pattern_date_time = r"Avboka Tvätt (.*?)\""
        match_date_time = re.search(pattern_date_time, data)
        if match_date_time:
            date = match_date_time.group(1)

        time = None
        pattern_time_slot = r"<b>(.*?)</b>"
        match_time_slot = re.search(pattern_time_slot, data)
        if match_time_slot:
            time = match_time_slot.group(1)

        number = None
        pattern_machine = r"Tv&#228;ttstuga (\d)"
        match_machine = re.search(pattern_machine, data)
        if match_machine:
            number = match_machine.group(1)

        # output
        output = {
            "date": date,
            "time": time,
            "number": number,
        }
        print(json.dumps(output))
        EOF
      command_timeout: 180
      value_template: >
        {{ value_json.date }}
      json_attributes:
        - date
        - time
        - number
      scan_interval: 21600

timer:
  laundry:
    name: Tvätt
    duration: 01:00:00
    icon: mdi:washing-machine
    restore: true

input_boolean:
  laundry_display:
    name: Visa timer
    icon: mdi:eye

automation:
  - alias: laundry_display_on
    id: '5895522913207'
    mode: restart
    trigger:
      platform: calendar
      event: start
      entity_id: calendar.tvatta
      offset: -00:01:00
    action:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.laundry_display

  - alias: laundry_display_off
    id: '8028880075818'
    mode: restart
    trigger:
      platform: calendar
      event: end
      entity_id: calendar.tvatta
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.laundry_display

  - alias: laundry_alert
    id: '3403466403120'
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.laundry
    action:
      - service: media_player.play_media
        target:
          entity_id: media_player.tablet
        data:
          media_content_id: /local/sound/timer.mp3
          media_content_type: music
      - service: notify.all_devices
        data:
          message: >
            {% set message = ['Tvätten är färdig', 'Tvätten är klar', 'Dags att gå ner'] %}
            {{'\U0001F9FA ' + message | random }}

  - alias: laundry_notify_ios_shorcuts
    id: '2360411947125'
    trigger:
      platform: event
      event_type: call_service
      event_data:
        domain: google
        service: create_event
    action:
      service: notify.mobile_app_iphone
      data:
        title: Tvättid tillagd
        message: >
          {% set date = trigger.event.data.service_data.start_date_time | as_datetime %}
          {% set day = ['Måndag', 'Tisdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lördag', 'Söndag'] %}
          {% set month = ['Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni', 'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'] %}
          {{ day[date.weekday()] }}, {{ date.day }} {{ month[date.month - 1] }} {{ date.strftime('%H:%M') }}
